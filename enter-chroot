#!/bin/sh -e
# Copyright (c) 2012 The Chromium OS Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

APPLICATION="${0##*/}"
CHROOTS="`readlink -f "\`dirname "$0"\`/../chroots"`"
NAME=''
USERNAME='1000'
NOLOGIN=''

USAGE="$APPLICATION [options] [command [args...]]

Enters an installed Debian-based chroot for running alongside Chromium OS.

By default, it will log into the primary user on the first chroot found.
You can specify a command and parameters to run instead of an interactive shell.

Options:
    -c CHROOTS  Directory the chroots are in. Default: $CHROOTS
    -n NAME     Name of the chroot to enter. Default: first one found in CHROOTS
    -u USERNAME Username (or UID) to log into. Default: 1000 (the primary user)
    -x          Does not log in, but directly executes the command instead.
                Note that the environment will be empty (sans TERM)."

# Function to exit with exit code $1, spitting out message $@ to stderr
error() {
    local ecode="$1"
    shift
    echo "$*" 1>&2
    exit "$ecode"
}

# Process arguments
while getopts 'c:n:u:x' f; do
    case "$f" in
    c) CHROOTS="$OPTARG";;
    n) NAME="$OPTARG";;
    u) USERNAME="$OPTARG";;
    x) NOLOGIN='y';;
    \?) error 2 "$USAGE";;
    esac
done
shift "$((OPTIND-1))"

# We need to run as root
if [ ! "$USER" = root -a ! "$UID" = 0 ]; then
    error 2 "$APPLICATION must be run as root."
fi

# Determine the chroot path
if [ -n "$NAME" ]; then
    CHROOT="$CHROOTS/$NAME"
    if [ ! -d "$CHROOT" ]; then
        error 1 "$CHROOT not found."
    fi
else
    for CHROOT in "$CHROOTS"/*; do
        if [ -d "$CHROOT/etc" ]; then
            NAME="${CHROOT##*/}"
            break
        fi
    done
    if [ -z "$NAME" ]; then
        error 1 "No chroots found in $CHROOTS"
    fi
fi

# Offer to run /prepare.sh if it exists and yet we're logging in.
if [ -z "$NOLOGIN" -a -f "$CHROOT/prepare.sh" ]; then
    echo 'A chroot preparation script still exists inside the chroot.' 1>&2
    echo 'The chroot may not be fully set up.' 1>&2
    runprepare='y'
    if tty -s; then
        echo -n 'Would you like to finish the setup? [Y/n] ' 1>&2
        read runprepare
    fi
    if [ -z "$runprepare" -o ! "${runprepare#y}" = "$runprepare" ]; then
        echo 'Preparing chroot environment...' 1>&2
        "$0" -c "$CHROOTS" -n "$NAME" -x '/prepare.sh'
        echo 'Setup completed. Entering chroot...' 1>&2
    else
        echo 'Skipping setup. You will be prompted again next time.' 1>&2
    fi
fi

# Resolve USERNAME if it is a UID (and we're logging in)
if [ -z "$NOLOGIN" ]; then
    case "$USERNAME" in
    ''|*[!0-9]*)
        # Make sure the username exists
        if ! grep -q "^$USERNAME:" "$CHROOT/etc/passwd"; then
            error 1 "User $USERNAME not found in $NAME"
        fi;;
     *) 
        # Resolve the UID
        uid="$USERNAME"
        USERNAME="`awk -F: '$3=='"$uid"'{print $1}' "$CHROOT/etc/passwd"`"
        if [ -z "$USERNAME" ]; then
            error 1 "UID $uid not found in $NAME"
        fi
    esac
    # Detect the home directory for the user
    CHROOTHOME="`awk -F: '$1=="'"$USERNAME"'"{print $6}' "$CHROOT/etc/passwd"`"
fi

# Ensure the chroot is executable and writable
mp="$CHROOT"
while ! mountpoint -q "$mp"; do
    mp="${mp%/*}"
    [ -z "$mp" ] && mp=/
done
mount -o remount,rw,dev,exec "$mp"

# Prepare chroot filesystem
# Soft-link resolv.conf so that updates are automatically propagated
mkdir -p "$CHROOT/etc/host-shill"
ln -sf 'host-shill/resolv.conf' "$CHROOT/etc/resolv.conf"

# Mounts; will auto-unmount everything below the chroot when the script exits.
TRAP="sh -e \"`dirname "$0"`/unmount-chroot\" -c \"$CHROOTS\" \"$NAME\";$TRAP"
trap "$TRAP" INT HUP 0
mount --bind /dev "$CHROOT/dev"
mount --bind /dev/pts "$CHROOT/dev/pts"
mount --bind /dev/shm "$CHROOT/dev/shm"
mount --bind /sys "$CHROOT/sys"
mount --bind /sys/fs/fuse/connections "$CHROOT/sys/fs/fuse/connections"
mount --bind /tmp "$CHROOT/tmp"
mount --bind /proc "$CHROOT/proc"
mount --bind /var/run/shill "$CHROOT/etc/host-shill"

# Bind-mount ~/Downloads if we're logged in as a user
localdownloads='/home/chronos/user/Downloads'
if [ -z "$NOLOGIN" -a -n "$CHROOTHOME" -a -d "$localdownloads" ]; then
    mkdir -p "$CHROOT/$CHROOTHOME/Downloads"
    mount --bind "$localdownloads" "$CHROOT/$CHROOTHOME/Downloads"
fi

# Disable screen dimming (TODO: create script to poke it instead)
initctl stop powerd 2>/dev/null || nopowerd=1

# Start the chroot and any specified command
ret=0
if [ -n "$NOLOGIN" ]; then
    env -i TERM="$TERM" chroot "$CHROOT" "$@" || ret=$?
elif [ $# = 0 ]; then
    env -i TERM="$TERM" chroot "$CHROOT" su - "$USERNAME" || ret=$?
else
    # Escape out the command
    cmd=''
    for param in "$@"; do
        cmd="$cmd\"$param\" "
    done
    env -i TERM="$TERM" chroot "$CHROOT" su -c "$cmd" - "$USERNAME" || ret=$?
fi

# Post-run; clean up
[ "$nopowerd" ] || initctl start powerd
exit $ret
